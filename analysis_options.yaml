include: package:flutter_lints/flutter.yaml   # 基础规则，Flutter 官方推荐配置

linter:
  rules:
    # ======================
    # ---- 风格相关 ----
    # ======================
    always_declare_return_types: true       # 函数必须声明返回类型，避免隐式 dynamic
    always_put_required_named_parameters_first: true  # 必填参数写在可选参数前，代码更直观
    always_use_package_imports: false        # 强制使用 package: 导入，避免相对路径混乱
    avoid_print: true                       # 禁止使用 print，建议用 logger 代替
    avoid_relative_lib_imports: false        # lib 内部禁止相对路径 import，统一用 package:
    prefer_const_constructors: true         # 构造函数尽量使用 const，提升性能
    prefer_const_declarations: true         # 声明变量时优先使用 const
    prefer_final_fields: true               # 类成员变量尽量 final，不可变性更安全
    prefer_final_locals: true               # 局部变量尽量 final，减少副作用
    unnecessary_const: true                 # 去掉多余的 const
    unnecessary_new: true                   # 去掉多余的 new

    # ======================
    # ---- 代码质量 ----
    # ======================
    avoid_empty_else: true                  # 禁止空的 else 块
    avoid_function_literals_in_foreach_calls: true # foreach 建议用普通 for，避免闭包开销
    avoid_init_to_null: true                # 不要显式初始化为 null
    avoid_null_checks_in_equality_operators: true # 禁止 "== null" 这种低效写法
    avoid_returning_null_for_future: true   # Future 返回值不要用 null
    avoid_single_cascade_in_expression_statements: true # 单级级联语法 .. 建议直接调用
    avoid_unused_constructor_parameters: true # 构造函数参数未用到要删除
    cancel_subscriptions: true              # 订阅要正确取消，避免内存泄漏
    close_sinks: true                       # StreamSink 要关闭，避免内存泄漏
    empty_catches: false                    # 空 catch 块是否允许，设为 false 表示允许（可按团队习惯调整）
    hash_and_equals: true                   # 重写 == 时必须同时重写 hashCode
    no_duplicate_case_values: true          # switch case 不允许重复
    prefer_is_not_empty: true               # 推荐使用 isNotEmpty 替代 length > 0
    unnecessary_getters_setters: true       # 避免无意义的 getter/setter 包装

    # ======================
    # ---- 命名规范 ----
    # ======================
    camel_case_extensions: true             # 扩展方法用驼峰命名
    camel_case_types: true                  # 类、枚举、typedef 必须驼峰命名
    constant_identifier_names: false        # 是否允许常量大写命名，设为 false 表示允许 API_KEY 这种写法
    library_prefixes: true                  # import 前缀命名要有意义
    non_constant_identifier_names: false    # 是否允许非常量大写命名，设为 false 表示允许
    file_names: true                        # 文件名必须小写下划线风格

analyzer:
  exclude:
    - "**/*.g.dart"                         # 自动生成文件不分析
    - "**/*.freezed.dart"
    - "**/*.gen.dart"
    - "build/**"

  errors:
    invalid_annotation_target: ignore       # 忽略注解目标无效的错误（常见于 freezed/json）
    unnecessary_import: warning             # 无用 import 给 warning 提示
    deprecated_member_use_from_same_package: warning # 使用本包内废弃 API 给 warning
